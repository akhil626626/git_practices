  ```markdown
git clone https://github.com/your-username/your-repository.git
```

This `git clone` command does the following:

1. Downloads the repository from the given URL 
2. Create a directory with the same name as the repository 
3. Downloads the full history (all commits and branches) of that repository
4. Creates a remote named `origin` pointing to the cloned URL

After cloning a repository, you'll have a local copy of the repository with the full history. Any changes you make will only be present locally.

You can then:

- Make changes to the code
- `git add` and `git commit` the changes 
- `git push origin master` to push your changes to the remote repository on GitHub
- `git pull origin master` to pull changes from GitHub into your local copy

So in short, `git clone` creates a local copy of a remote GitHub repository, along with tracking its full commit history and creating a remote `origin` to push/pull from.



git remote add origin https://github.com/your-username/your-repository.git
This command adds a remote named origin that points to your GitHub repository. It needs to be run only once after you clone your repository locally.

After running this command, you'll be able to:

git push origin master to push your code to the GitHub repository
git pull origin master to pull changes from GitHub into your local repository.
The origin remote name is a default name Git uses. You can use any name instead of origin.

So in short, this command adds a remote named origin pointing to your GitHub repository URL, allowing you to sync your local repository with the remote GitHub one.



git remote set-url origin https://new-url-of-your-repository.git
This command changes the URL of the remote repository that the local Git repository points to. In this case, it changes the origin URL to the new URL specified.
This is useful if you want to switch your local repository from pointing to one remote repository to pointing to a different remote repository.
